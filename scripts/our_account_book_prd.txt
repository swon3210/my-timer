<context>
# 개요

- 신혼부부들의 가계부 작성 서비스. 연, 월, 주단위 예산, 소득, 지출의 쳬게적인 가계부 작성법에 따라 가계부를 작성할 수 있도록 도움을 준다. 
- 고정 소득과 지출을 자동으로 등록하는 기능을 제공하여 가계부 작성에 필요한 수고를 줄여준다. 
- 최소한의 노력으로 신혼부부가 목표로하는 금액을 체계적으로 저축할 수 있도록 돕는 것을 목적으로 한다.

# 주요 기능

## 카테고리 관리 기능

- 수입, 지출 항목에 대한 카테고리들을 추가, 수정, 삭제할 수 있다.
- 수입, 지출 항목들을 카테고리 별로 정리해서 조회하기 위해 필요하다.
- 수입 카테고리들을 고정 수입과 변동 수입으로 대분류가 나뉜다.
- 지출 카테고리들은 일반 지출과 Flex 지출(여가 지출)로 대분류가 나뉜다.
- 각각의 카테고리들은 귀여운 아이콘 및 이미지를 설정할 수 있다.
- 주, 월, 연간 예산을 세울 때 지출 카테고리 별로 예산을 세우기 위해 필요하다.
- 지출 항목들을 리스트로 조회하며, Modal 을 통해 항목을 추가, 수정한다. 지출 리스트 항목 각각에 달린 삭제 버튼으로 각 항목을 삭제한다.

## 주, 월, 연간 예산 관리 기능

- 주간, 월간, 연간으로 소비할 지출들에 대한 예산을 지정할 수 있다.
- 예산은 지출 카테고리별로 항목을 만든다.
- 예산은 주간, 월간, 연간 예산을 만든다.


## 수입, 지출 내역 관리 기능

- 수입과 지출 내역을 생성할 수 있다.
- 수입 내역은 취득 날짜와 카테고리, 취득자가 누구인지를 지정할 수 있다.
- 지출 내역은 소비 날짜와 카테고리, 소비자가 누구인지를 지정할 수 있다.
- 고정 수입을 지정하여 일정한 날짜 간격으로 복수의 수입 내역을 생성할 수 있다.
- 고정 지출을 지정하여 일정한 날짜 간격으로 복수의 지출 내역을 생성할 수 있다.


## 주, 월, 월간 대시보드 기능

- 주간, 월간, 연간으로 수입과 지출 항목에 대한 요약과 지정한 예산과의 차이점을 한눈에 볼 수 있다.
- 수입, 지출 항목들을 카테고리 기준으로 그래프를 통해 한눈에 확인할 수 있다.
- 전체 저축액에 대한 목표 금액을 설정할 수 있다. 목표 금액을 설정할 때는 해당 목표에 대한 제목, 설명을 지정할 수 있다.
- 전체 저축액을 확인하고 목표 금액과의 차이를 progress bar 로 한눈에 확인할 수 있다.


# User Experience

## User Personas
- 신혼부부 (25-35세)
  - 재정 관리에 서툰 초보자
  - 공동 재정 관리의 필요성을 느끼는 커플
  - 미래를 위한 저축 목표가 있는 사용자
  - 간단하고 직관적인 UI를 선호

## Key User Flows
1. 일상적인 가계부 관리
   - 앱 실행 시 대시보드에서 전체 재정 현황 확인
   - 수입/지출 내역 빠르게 추가
   - 카테고리별 지출 분석 확인
   - 저축 목표 달성률 확인

2. 공동 재정 관리
   - 파트너와 지출 내역 공유
   - 공동 지출 항목 관리
   - 개인/공동 지출 구분

## UI/UX Considerations
1. 메인 대시보드
   - 한눈에 보이는 재정 현황 요약
   - 빠른 수입/지출 입력 버튼
   - 목표 달성 진행률 시각화
   - 최근 거래 내역 미리보기

2. 사용성
   - 직관적인 아이콘과 색상 사용
   - 최소한의 클릭으로 기능 접근
   - 터치 친화적 UI
   - 다크/라이트 모드 지원

3. 데이터 시각화
   - 카테고리별 지출 파이 차트
   - 월별 수입/지출 트렌드 그래프
   - 목표 달성 진행 바
   - 예산 대비 실제 지출 비교 차트

4. 알림 및 리마인더
   - 정기 수입/지출 알림
   - 예산 초과 경고
   - 목표 달성 축하 메시지
   - 정기적인 재정 리뷰 알림
</context>
<PRD>

# Technical Architecture

## System Components
- Frontend: Next.js 14 기반의 웹 애플리케이션
  - React 18
  - TypeScript
  - Tailwind CSS (스타일링)
  - Radix UI (UI 컴포넌트)
  - Framer Motion (애니메이션)
  - React Query (데이터 페칭)
  - Jotai (상태 관리)
  - React Hook Form (폼 관리)
  - Zod (데이터 검증)
  - Recharts (데이터 시각화)

- Backend: Firebase 기반 서버리스 아키텍처
  - Firebase Authentication (사용자 인증)
  - Firebase Firestore (데이터베이스)
  - Firebase Storage (파일 저장)
  - Firebase Cloud Functions (서버리스 함수)

- 개발 도구 및 인프라
  - TypeScript (타입 안정성)
  - ESLint (코드 품질)
  - PNPM (패키지 관리)
  - Next PWA (프로그레시브 웹 앱)
  - Vercel (배포 플랫폼)

## Data Models
- User: 사용자 정보 (이름, 이메일, 비밀번호)
- Category: 수입/지출 카테고리 (이름, 타입, 아이콘)
- Transaction: 거래 내역 (금액, 날짜, 카테고리, 설명)
- Budget: 예산 정보 (기간, 카테고리, 금액)
- SavingGoal: 저축 목표 (제목, 설명, 목표 금액, 현재 금액)
- RecurringTransaction: 반복 거래 설정 (주기, 금액, 카테고리)

## APIs and Integrations
- RESTful API 엔드포인트
- Firebase Authentication (사용자 인증)
- Push Notification 서비스 (예산 초과 알림)
- 차트 라이브러리 (데이터 시각화)

## Infrastructure Requirements
- AWS/Google Cloud 기반 서버 인프라
- CI/CD 파이프라인
- 모니터링 및 로깅 시스템
- 데이터 백업 및 복구 시스템

# Development Roadmap

## Phase 1: MVP (Minimum Viable Product)
- 기본 사용자 인증 시스템
- 카테고리 관리 기능
- 기본적인 수입/지출 입력 기능
- 간단한 대시보드 (월간 요약)

## Phase 2: Core Features
- 예산 관리 시스템
- 반복 거래 설정
- 상세한 대시보드 (주간/월간/연간)
- 저축 목표 설정 및 추적

## Phase 3: Enhanced Features
- 데이터 시각화 개선
- 알림 시스템
- 데이터 내보내기/가져오기
- 다중 통화 지원

## Phase 4: Advanced Features
- AI 기반 지출 분석
- 커스텀 리포트 생성
- 가계부 공유 기능
- API 연동 (은행, 카드사 등)

# Logical Dependency Chain

## Foundation (Phase 1)
1. 사용자 인증 시스템
2. 기본 데이터 모델 구현
3. 카테고리 관리
4. 기본 CRUD 작업

## Core Functionality (Phase 2)
1. 예산 관리 시스템
2. 반복 거래 기능
3. 대시보드 구현
4. 저축 목표 기능

## Enhancement (Phase 3)
1. 데이터 시각화
2. 알림 시스템
3. 데이터 관리 기능
4. 다국어 지원

## Advanced Features (Phase 4)
1. AI/ML 통합
2. 고급 분석 기능
3. 외부 시스템 연동
4. 협업 기능

# Risks and Mitigations

## Technical Challenges
- 데이터 동기화 문제
  - 해결: 실시간 데이터베이스 사용 및 캐싱 전략 수립
- 성능 이슈
  - 해결: 데이터베이스 인덱싱 및 쿼리 최적화
- 보안 위협
  - 해결: 엄격한 인증/인가 시스템 및 데이터 암호화

## MVP Scope
- 기능 범위 과다
  - 해결: 핵심 기능에 집중하고 점진적 확장
- 사용자 경험
  - 해결: 초기 사용자 테스트 및 피드백 수집

## Resource Constraints
- 개발 인력
  - 해결: 우선순위 기반 개발 및 외부 리소스 활용
- 시간 제약
  - 해결: 애자일 방법론 적용 및 지속적 배포

# Appendix

## Research Findings
- 신혼부부의 주요 재정 관리 니즈
- 기존 가계부 앱의 한계점
- 사용자 선호도 조사 결과

## Technical Specifications
- 개발 환경 설정
- API 문서
- 데이터베이스 스키마
- 보안 정책
</PRD>