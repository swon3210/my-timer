---
description: 
globs: 
alwaysApply: false
---
# React Hook Form 사용 규칙

## **필수 사항**
- **모든 form 관련 컴포넌트는 react-hook-form을 사용하여 상태를 관리할 것**
- **useForm 훅을 통해 form 상태와 validation을 처리할 것**
- **폼 제출 시 handleSubmit 함수를 반드시 사용할 것**

## **기본 구조**

```typescript
// ✅ DO: react-hook-form 기본 구조
import { useForm, SubmitHandler } from 'react-hook-form';

interface FormData {
  email: string;
  password: string;
}

export function LoginForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
    setValue,
    reset
  } = useForm<FormData>({
    defaultValues: {
      email: '',
      password: ''
    }
  });

  const onSubmit: SubmitHandler<FormData> = async (data) => {
    try {
      await submitForm(data);
      reset();
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input
        {...register('email', {
          required: '이메일을 입력하세요',
          pattern: {
            value: /^\S+@\S+$/i,
            message: '올바른 이메일 형식을 입력하세요'
          }
        })}
        placeholder="이메일"
      />
      {errors.email && <span>{errors.email.message}</span>}
      
      <input
        type="password"
        {...register('password', {
          required: '비밀번호를 입력하세요',
          minLength: {
            value: 6,
            message: '비밀번호는 최소 6자 이상이어야 합니다'
          }
        })}
        placeholder="비밀번호"
      />
      {errors.password && <span>{errors.password.message}</span>}
      
      <button type="submit" disabled={isSubmitting}>
        {isSubmitting ? '제출 중...' : '로그인'}
      </button>
    </form>
  );
}

// ❌ DON'T: useState를 사용한 form 상태관리
function BadLoginForm() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errors, setErrors] = useState({});
  
  // 복잡한 validation 로직...
}
```

## **Validation 규칙**
- **register 함수의 validation 옵션을 적극 활용할 것**
- **복잡한 validation은 별도 함수로 분리할 것**
- **에러 메시지는 사용자 친화적인 한국어로 작성할 것**

```typescript
// ✅ DO: 복잡한 validation 분리
const validatePassword = (value: string) => {
  if (value.length < 8) return '비밀번호는 8자 이상이어야 합니다';
  if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(value)) {
    return '비밀번호는 대소문자와 숫자를 포함해야 합니다';
  }
  return true;
};

// register에서 사용
{...register('password', { validate: validatePassword })}
```

## **Form Mode 설정**
- **실시간 validation이 필요한 경우 mode: 'onChange' 사용**
- **일반적인 경우 mode: 'onSubmit' (기본값) 사용**
- **UX를 고려하여 적절한 mode 선택**

```typescript
// ✅ DO: 적절한 mode 설정
const form = useForm<FormData>({
  mode: 'onBlur', // blur 시 validation
  reValidateMode: 'onChange' // 에러 발생 후 실시간 재검증
});
```

## **Controller 사용 (복잡한 컴포넌트)**
- **커스텀 컴포넌트나 외부 라이브러리 컴포넌트는 Controller 사용**
- **Material-UI, Ant Design 등의 컴포넌트 통합 시 필수**

```typescript
// ✅ DO: Controller 사용
import { Controller } from 'react-hook-form';

<Controller
  name="category"
  control={control}
  rules={{ required: '카테고리를 선택하세요' }}
  render={({ field, fieldState: { error } }) => (
    <Select
      {...field}
      placeholder="카테고리 선택"
      error={!!error}
      helperText={error?.message}
    />
  )}
/>
```

## **성능 최적화**
- **대용량 form의 경우 shouldUnregister: false 설정 고려**
- **불필요한 리렌더링 방지를 위해 watch 사용 최소화**
- **useCallback을 활용한 함수 메모이제이션**

```typescript
// ✅ DO: 성능 최적화
const form = useForm<FormData>({
  shouldUnregister: false, // unmount 시 값 유지
  shouldFocusError: true   // 에러 발생 시 자동 포커스
});

const onSubmit = useCallback(async (data: FormData) => {
  // 제출 로직
}, []);
```

## **에러 처리**
- **formState.errors를 통한 validation 에러 표시**
- **서버 에러는 setError를 통해 수동 설정**
- **에러 메시지는 일관된 스타일로 표시**

```typescript
// ✅ DO: 서버 에러 처리
const onSubmit = async (data: FormData) => {
  try {
    await api.submitForm(data);
  } catch (error) {
    if (error.field) {
      setError(error.field, {
        type: 'server',
        message: error.message
      });
    }
  }
};
```

## **기존 컴포넌트 참고**
- [ExpenseForm.tsx](mdc:src/app/_components/ExpenseFormDialog/ExpenseForm/ExpenseForm.tsx)
- [CategoryForm.tsx](mdc:src/app/account-book/category/CategoryForm/CategoryForm.tsx)
- [TransactionForm.tsx](mdc:src/app/account-book/transactions/_components/TransactionForm.tsx)

## **관련 라이브러리**
- **Zod와 함께 사용하는 경우 @hookform/resolvers 활용**
- **TypeScript 타입 안전성 확보**

```typescript
// ✅ DO: Zod와 함께 사용
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const schema = z.object({
  email: z.string().email('올바른 이메일을 입력하세요'),
  password: z.string().min(6, '비밀번호는 6자 이상이어야 합니다')
});

const form = useForm<FormData>({
  resolver: zodResolver(schema)
});
```
