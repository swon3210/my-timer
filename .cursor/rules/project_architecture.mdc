---
description: 
globs: 
alwaysApply: true
---
# Project Architecture & Coding Conventions

This document outlines the core architectural principles, coding conventions, and style guides for this project. Adhering to these rules is crucial for maintaining code quality, consistency, and maintainability.

---

### **1. Core Technology Stack**

*   **Framework**: [Next.js 14 (App Router)](mdc:https:/nextjs.org/docs/app)
*   **Language**: [TypeScript](mdc:https:/www.typescriptlang.org)
*   **UI**: [Tailwind CSS](mdc:https:/tailwindcss.com) with [shadcn/ui](mdc:https:/ui.shadcn.com)
*   **Data Fetching & State**: [TanStack Query (React Query)](mdc:https:/tanstack.com/query/latest)
*   **Global State**: [Jotai](mdc:https:/jotai.org)
*   **Backend & API**: [Next.js API Routes](mdc:https:/nextjs.org/docs/app/building-your-application/routing/route-handlers) & [Firebase](mdc:https:/firebase.google.com)

---

### **2. üö® CRITICAL: The `src/domains` Architecture**

This is the **most important architectural pattern** in the project. The `src/domains` directory separates business logic and data fetching from the UI layer.

*   **Purpose**: To decouple UI components from data sources. UI components should be unaware of *how* data is fetched or mutated.
*   **Structure**: Each domain (e.g., `account-book`, `users`) contains:
    *   `fetchers.ts`: Raw functions that make API calls (e.g., using `axios` or our API client in `[api.ts](mdc:src/lib/api.ts)`).
    *   `use...Query.ts`: TanStack Query custom hooks that use the fetchers.
    *   `use...Mutation.ts`: TanStack Query custom hooks for creating, updating, or deleting data.
    *   `types.ts` / `schema.ts`: TypeScript types or Zod schemas for the domain's data models.

---

### **‚úÖ MUST DO: Golden Rules**

Follow these rules strictly.

1.  **Data Fetching**:
    *   **ALWAYS** place data fetching logic inside `src/domains`.
    *   **ALWAYS** use the TanStack Query custom hooks (e.g., `useBudgetsQuery`) within UI components to get data.
    *   For data mutations (Create, Update, Delete), **ALWAYS** use the corresponding mutation hooks (e.g., `useAddBudgetMutation`) and handle `onSuccess` for query invalidation.

2.  **Component & UI**:
    *   **ALWAYS** use `shadcn/ui` components from `[src/components/ui](mdc:src/components/ui)` as the base for any new UI.
    *   For conditional class names, **ALWAYS** use the `cn` utility from `[utils.ts](mdc:src/lib/utils.ts)`.
    *   **ALWAYS** colocate page-specific components within that page's `_components` directory (e.g., `[Header.tsx](mdc:src/app/account-book/home/_components/Header.tsx)`).
    *   **CREATE** globally reusable components in `[src/components](mdc:src/components)`.

3.  **State Management**:
    *   For global or cross-component state, **ALWAYS** use [Jotai](mdc:https:/jotai.org).
    *   Define atoms close to where they are used. For page/layout-specific state, use a local `_atom` folder (e.g., `[useDateAtom.ts](mdc:src/app/account-book/home/_atom/useDateAtom.ts)`).
    *   Define truly global atoms in `[atoms.ts](mdc:src/lib/atoms.ts)`.

4.  **Overlay & Modals**:
    *   **ALWAYS** use the `[overlay-kit](mdc:https:/github.com/josselinbuils/overlay-kit)` library for any overlay UI (Modals, Dialogs, Popups).
    *   **ALWAYS** wrap the overlay logic in a dedicated custom hook (e.g., `useExpenseFormDialogOverlay`). This hook should handle opening the overlay with necessary props.
    *   The hook should be named `use<ComponentName>Overlay.tsx`. See `[useExpenseFormDialogOverlay.tsx](mdc:src/app/_components/ExpenseFormDialog/useExpenseFormDialogOverlay.tsx)` for a reference implementation.

---

### **‚ùå MUST NOT DO: Anti-Patterns**

Avoid these patterns at all costs.

1.  **NO Direct Data Fetching in Components**:
    *   **NEVER** use `fetch`, `axios`, or SWR directly inside a React component. This violates our core architectural principle. Use the hooks from `src/domains`.

2.  **NO `shadcn/ui` Dialog/AlertDialog**:
    *   **NEVER** use `Dialog` or `AlertDialog` directly from `shadcn/ui`. All overlay UIs must be implemented via our `overlay-kit` pattern to ensure consistency.

3.  **NO Manual CSS/Styling**:
    *   **NEVER** write plain CSS (`.css`, `.scss`) or use the `style` prop for layout and styling.
    *   **ALWAYS** use Tailwind CSS utility classes. If a specific style is not possible with existing utilities, discuss extending the theme in `[tailwind.config.ts](mdc:tailwind.config.ts)`.

4.  **NO Business Logic in UI**:
    *   **NEVER** place complex data transformations, business rules, or API endpoint logic inside UI components. This logic belongs in `src/domains` hooks or `src/lib/utils.ts`.

---

### **Directory Quick Reference**

*   `[src/app](mdc:src/app)`: Main application. Each folder is a route.
    *   `_components`, `_hooks`, `_utils`, `_atom`: **Private** modules for a specific route segment. Not part of the URL.
    *   `[api](mdc:src/app/api)`: Server-side API routes that interact with Firebase.
*   `[src/components](mdc:src/components)`: Global, reusable components (`<Button>`, `<Card>`).
    *   `[ui](mdc:src/components/ui)`: Base `shadcn/ui` components. Do not modify directly; extend in `[src/components](mdc:src/components)`.
*   `[src/domains](mdc:src/domains)`: **(Heart of the app)** Business logic, data fetching hooks, and types.
*   `[src/lib](mdc:src/lib)`: Global utilities, core atoms, constants, and providers.
*   `[src/types](mdc:src/types)`: Global TypeScript type definitions.
